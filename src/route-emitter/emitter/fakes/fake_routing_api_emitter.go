// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/diego-release/route-emitter/emitter"
	"code.cloudfoundry.org/diego-release/route-emitter/routingtable"
)

type FakeRoutingAPIEmitter struct {
	EmitStub        func(routingtable.TCPRouteMappings) error
	emitMutex       sync.RWMutex
	emitArgsForCall []struct {
		arg1 routingtable.TCPRouteMappings
	}
	emitReturns struct {
		result1 error
	}
	emitReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoutingAPIEmitter) Emit(arg1 routingtable.TCPRouteMappings) error {
	fake.emitMutex.Lock()
	ret, specificReturn := fake.emitReturnsOnCall[len(fake.emitArgsForCall)]
	fake.emitArgsForCall = append(fake.emitArgsForCall, struct {
		arg1 routingtable.TCPRouteMappings
	}{arg1})
	fake.recordInvocation("Emit", []interface{}{arg1})
	fake.emitMutex.Unlock()
	if fake.EmitStub != nil {
		return fake.EmitStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.emitReturns
	return fakeReturns.result1
}

func (fake *FakeRoutingAPIEmitter) EmitCallCount() int {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	return len(fake.emitArgsForCall)
}

func (fake *FakeRoutingAPIEmitter) EmitCalls(stub func(routingtable.TCPRouteMappings) error) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = stub
}

func (fake *FakeRoutingAPIEmitter) EmitArgsForCall(i int) routingtable.TCPRouteMappings {
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	argsForCall := fake.emitArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRoutingAPIEmitter) EmitReturns(result1 error) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = nil
	fake.emitReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoutingAPIEmitter) EmitReturnsOnCall(i int, result1 error) {
	fake.emitMutex.Lock()
	defer fake.emitMutex.Unlock()
	fake.EmitStub = nil
	if fake.emitReturnsOnCall == nil {
		fake.emitReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.emitReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRoutingAPIEmitter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.emitMutex.RLock()
	defer fake.emitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoutingAPIEmitter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ emitter.RoutingAPIEmitter = new(FakeRoutingAPIEmitter)
